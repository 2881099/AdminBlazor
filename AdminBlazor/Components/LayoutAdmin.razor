@inherits LayoutComponentBase
@implements IDisposable
@namespace BootstrapBlazor.Components
@using AdminBlazor.Infrastructure.Encrypt
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Http.Extensions
@using Newtonsoft.Json

<div class="app-wrapper">
    <nav class="app-header navbar navbar-expand bg-body">
        <div class="container-fluid">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" href="#" role="button" onclick="adminBlazorJS.sidebarToggle();return false;">
                        <i class="fa fa-bars"></i>
                    </a>
                </li>
                @if (admin.CurrentMenu != null)
                {
                    <li class="nav-item d-none d-md-block ml-3" style="line-height:1rem;margin-top:12px">
                        <ol class="breadcrumb float-sm-end m-0 p-0">
                            <li class="breadcrumb-item">首页</li>
                            @if (admin.CurrentMenu.Parent != null)
                            {
                                <li class="breadcrumb-item">@admin.CurrentMenu.Parent.Label</li>
                            }
                            <li class="breadcrumb-item active" aria-current="page">@admin.CurrentMenu?.Label</li>
                        </ol>
                    </li>
                }
            </ul>
            @if (admin?.User != null)
            {
                <Logout ImageUrl="logo.png" DisplayName="@admin.User.Username" UserName="@admin.Roles.FirstOrDefault()?.Name" class="">
                    <HeaderTemplate>
                        <div class="d-flex flex-fill align-items-center">
                            <img alt="avatar" src="logo.png" style="border-radius: 50%;">
                            <div class="flex-fill">
                                <div class="logout-dn">@admin.User.Username</div>
                                <div class="logout-un">@admin.Roles.FirstOrDefault()?.Description</div>
                            </div>
                        </div>
                    </HeaderTemplate>
                    <LinkTemplate>
                        <a @onclick="LogoutClick" href="/Admin/Login"><i class="fa-solid fa-key"></i><span>注销</span></a>
                    </LinkTemplate>
                </Logout>
            }
        </div>
    </nav>

    <aside class="app-sidebar bg-body-secondary shadow" data-bs-theme="dark">
        <div class="sidebar-brand">
            <a href="/Admin/" class="brand-link">
                <img src="logo.png" class="brand-image opacity-75 shadow">
                <span class="brand-text fw-light">@admin.Tenant?.Title</span>
            </a>
        </div>
        <div class="sidebar-wrapper">
            <AdminSidebarMenu />
        </div>
    </aside>

    <main class="app-main">
@*         <div class="app-content-header">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-sm-6">
                        <h3 class="mb-0"></h3>
                    </div>
                    <div class="col-sm-6">
                        <ol class="breadcrumb float-sm-end">
                            <li class="breadcrumb-item"><a href="#">Home</a></li>
                            <li class="breadcrumb-item active" aria-current="page">
                            </li>
                        </ol>
                    </div>
                </div>
            </div>
        </div> *@
        <div id="app-dockview" class="app-content dockview-theme-light">
            
        </div>
    </main>

    @* <footer class="app-footer">
        <div class="float-end d-none d-sm-inline"></div>
        <strong>
            Copyright &copy; 2024-2024&nbsp;
            <a href="https://freesql.net" class="text-decoration-none">FreeSql.net</a>.
        </strong>
        All rights reserved.
    </footer> *@
</div>

@if (admin.AuthPathSuccess)
{
    foreach (var tab in admin.CascadeTabs)
    {
        <div @key="tab.Key" id="dockview-panel-@tab.Key">
            @if (tab.IsLoad)
            {
                @if (tab.PageType == null)
                {
                    <Alert ShowBar="true" ShowBorder="true" Color="Color.Danger">
                        <div>@tab.Url 路由页面不存在！</div>
                    </Alert>
                }
                else
                {
                    <DynamicComponent Type="tab.PageType" />
                }
            }
        </div>
    }
}

@foreach (var modal in admin.CascadeModals)
{
    <div class="modal fade draggable " id="@modal.ClientId" data-bs-backdrop="@(modal.IsBackdropStatic ? "static" : "true")" data-bs-keyboard="@(modal.IsKeyboard ? "true" : "false")" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog @modal.DialogClassName modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <div class="modal-title">@modal.Title</div>
                    <button type="button" class="close" aria-label="Close" @onclick="modal.Hide">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    @if (modal.Visible)
                    {
                        @modal.ChildContent
                    }
                </div>
                @if (modal.OnYes.HasDelegate)
                {
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="modal.Hide">@modal.CloseButton</button>
                        <button type="button" class="btn btn-primary" @onclick="modal.YesClick">@modal.YesButton</button>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter] AdminContext admin { get; set; }

    async Task LogoutClick()
    {
        await admin.SignOut();
        admin.RedirectLogin();
    }

    async protected override Task OnInitializedAsync()
    {
        await admin.Init();
        if (!await admin.AuthPath(new Uri(nav.Uri).AbsolutePath))
        {
            if (admin.User != null)
            {
                //没有访问权限.
            }
            else
            {
                admin.RedirectLogin();
                return;
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        if (admin.Tenant == null) await JS.Error("租户信息错误.");
        if (admin.Roles?.Any() == false) await JS.Error("没有访问权限: 未分配角色.");
        else if (!admin.AuthPathSuccess) await JS.Error("没有访问权限.");

        locationChangingHandler = nav.RegisterLocationChangingHandler(async e =>
        {
            var uri = nav.ToAbsoluteUri(e.TargetLocation);
            if (!await admin.AuthPath(uri.AbsolutePath))
                await JS.Error("没有访问权限.");
        });
    }

    IDisposable locationChangingHandler;
    public void Dispose() => locationChangingHandler?.Dispose();
}