@namespace BootstrapBlazor.Components

@code {

    [Parameter] public string ClientId { get; set; } = $"modal-{Guid.NewGuid().ToString("n")}";
    [Parameter] public bool IsBackdropStatic { get; set; } = true;
    [Parameter] public bool IsKeyboard { get; set; } = true;
    [Inject] AdminContext admin { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) return;
        if (_visible) await admin.CascadeSource.NotifyChangedAsync();
        await base.OnAfterRenderAsync(firstRender);
    }

    async Task Show()
    {
        await admin.OpenModal(this);
        await JS.InvokeVoidAsync("adminBlazorJS.modalShow", ClientId, DotNetObjectReference.Create(this));
    }
    [JSInvokable]
    async public Task ModalOnClose()
    {
        await admin.CloseModal(this);
        if (OnClose.HasDelegate) await OnClose.InvokeAsync();
    }
    async internal Task Hide()
    {
        await JS.InvokeVoidAsync("eval", $"$('#{ClientId}').modal('hide')");
        if (OnClose.HasDelegate) await OnClose.InvokeAsync();
    }

    [Parameter] public string Title { get; set; } = "标题";
    [Parameter] public string YesButton { get; set; } = "保存";
    [Parameter] public string CloseButton { get; set; } = "取消";
    [Parameter] public string DialogClassName { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }

    bool _visible;
    [Parameter] public bool Visible
    {
        get => _visible;
        set
        {
            if (_visible != value)
            {
                _visible = value;
                if (value) this.InvokeAsync(Show);
                else this.InvokeAsync(Hide);
                return;
            }
        }
    }

    [Parameter] public EventCallback OnYes { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    async internal Task YesClick()
    {
        if (OnYes.HasDelegate) await OnYes.InvokeAsync();
    }
}